{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_ALL_HOSPITALS, ADD_HOSPITAL, EDIT_HOSPITAL, GET_HOSPITAL, DELETE_HOSPITAL, HOSPITAL_ERROR } from './types'; //Get All Hospitals\n\nexport const getHospitals = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/hospitals');\n    dispatch({\n      type: GET_ALL_HOSPITALS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: HOSPITAL_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add hospital\n\nexport const addHospital = (formData, history) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post('/api/hospitals', formData, config);\n    dispatch({\n      type: ADD_HOSPITAL,\n      payload: res.data\n    });\n    dispatch(setAlert('Hospital Created', 'success'));\n    history.push('/home');\n  } catch (err) {\n    const errors = err.response.data.errors; // alert(\"Duplicate Entry\")\n\n    if (!errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n      history.push('/home');\n    }\n\n    dispatch({\n      type: HOSPITAL_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Edit hospital\n\nexport const editHospital = (id, formData, history) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.put(\"/api/hospitals/\".concat(id), formData, config);\n    dispatch({\n      type: EDIT_HOSPITAL,\n      payload: res.data\n    });\n    dispatch(setAlert('Hospital Updated', 'success'));\n    history.push('/home');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: HOSPITAL_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get hospital\n\nexport const getHospital = id => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/hospitals/\".concat(id));\n    dispatch({\n      type: GET_HOSPITAL,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: HOSPITAL_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete hospital\n\nexport const deleteHospital = id => async dispatch => {\n  try {\n    await axios.delete(\"/api/hospitals/\".concat(id));\n    dispatch({\n      type: DELETE_HOSPITAL,\n      payload: id\n    });\n    dispatch(setAlert('Hospital Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: HOSPITAL_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["F:\\GUVI-PLACEMENTS\\Github-trials\\HospitalMgmt\\client\\src\\actions\\hospital.js"],"names":["axios","setAlert","GET_ALL_HOSPITALS","ADD_HOSPITAL","EDIT_HOSPITAL","GET_HOSPITAL","DELETE_HOSPITAL","HOSPITAL_ERROR","getHospitals","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","addHospital","formData","history","config","headers","post","push","errors","forEach","error","editHospital","id","put","getHospital","deleteHospital","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { setAlert } from './alert';\r\nimport { GET_ALL_HOSPITALS, ADD_HOSPITAL, EDIT_HOSPITAL, GET_HOSPITAL, DELETE_HOSPITAL, HOSPITAL_ERROR } from './types';\r\n\r\n//Get All Hospitals\r\nexport const getHospitals = () => async dispatch => {\r\n    try {\r\n        const res = await axios.get('/api/hospitals');\r\n\r\n        dispatch({\r\n            type: GET_ALL_HOSPITALS,\r\n            payload: res.data\r\n        });\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: HOSPITAL_ERROR,\r\n            payload: { msg: err.response.statusText, status: err.response.status }\r\n        });\r\n    }\r\n}\r\n\r\n// Add hospital\r\nexport const addHospital = (formData, history) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    try {\r\n        const res = await axios.post('/api/hospitals', formData, config);\r\n\r\n        dispatch({\r\n            type: ADD_HOSPITAL,\r\n            payload: res.data\r\n        });\r\n\r\n        dispatch(setAlert('Hospital Created', 'success'));\r\n        history.push('/home');\r\n\r\n    } catch (err) {\r\n        const errors = err.response.data.errors;\r\n        // alert(\"Duplicate Entry\")\r\n        if (!errors) {\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n            history.push('/home');\r\n        }\r\n        dispatch({\r\n            type: HOSPITAL_ERROR,\r\n            payload: { msg: err.response.statusText, status: err.response.status }\r\n        });\r\n    }\r\n};\r\n\r\n// Edit hospital\r\nexport const editHospital = (id, formData, history) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    };\r\n\r\n    try {\r\n        const res = await axios.put(`/api/hospitals/${id}`, formData, config);\r\n\r\n        dispatch({\r\n            type: EDIT_HOSPITAL,\r\n            payload: res.data\r\n        });\r\n\r\n        dispatch(setAlert('Hospital Updated', 'success'));\r\n        history.push('/home');\r\n\r\n    } catch (err) {\r\n        const errors = err.response.data.errors;\r\n\r\n        if (errors) {\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n        }\r\n        dispatch({\r\n            type: HOSPITAL_ERROR,\r\n            payload: { msg: err.response.statusText, status: err.response.status }\r\n        });\r\n    }\r\n};\r\n\r\n// Get hospital\r\nexport const getHospital = id => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`/api/hospitals/${id}`);\r\n\r\n        dispatch({\r\n            type: GET_HOSPITAL,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: HOSPITAL_ERROR,\r\n            payload: { msg: err.response.statusText, status: err.response.status }\r\n        });\r\n    }\r\n};\r\n\r\n// Delete hospital\r\n export const deleteHospital = id => async dispatch => {\r\n    try {\r\n      await axios.delete(`/api/hospitals/${id}`);\r\n\r\n      dispatch({\r\n        type: DELETE_HOSPITAL,\r\n        payload: id\r\n      });\r\n\r\n      dispatch(setAlert('Hospital Removed', 'success'));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: HOSPITAL_ERROR,\r\n        payload: { msg: err.response.statusText, status: err.response.status }\r\n      });\r\n    }\r\n  };"]},"metadata":{},"sourceType":"module"}