{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_PATIENTS, GET_ALL_PATIENTS, GET_PATIENT, PATIENT_ERROR, DELETE_PATIENT, ADD_PATIENT, EDIT_PATIENT } from './types'; //Get Me Patients\n\nexport const getMePatients = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/patients/me');\n    dispatch({\n      type: GET_PATIENTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PATIENT_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //Get All Patients\n\nexport const getPatients = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/patients');\n    dispatch({\n      type: GET_ALL_PATIENTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PATIENT_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete patient\n\nexport const deletePatient = id => async dispatch => {\n  try {\n    await axios.delete(\"/api/patients/\".concat(id));\n    dispatch({\n      type: DELETE_PATIENT,\n      payload: id\n    });\n    dispatch(setAlert('Patient Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PATIENT_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add patient\n\nexport const addPatient = (formData, history) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post('/api/patients', formData, config);\n    dispatch({\n      type: ADD_PATIENT,\n      payload: res.data\n    });\n    dispatch(setAlert('Patient Created', 'success'));\n    history.push('/home');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PATIENT_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Edit patient\n\nexport const editPatient = (id, formData, history) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.put(\"/api/patients/\".concat(id), formData, config);\n    dispatch({\n      type: EDIT_PATIENT,\n      payload: res.data\n    });\n    dispatch(setAlert('Patient Updated', 'success'));\n    history.push('/home');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PATIENT_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get patient\n\nexport const getPatient = id => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/patients/\".concat(id));\n    dispatch({\n      type: GET_PATIENT,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PATIENT_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["F:\\GUVI-PLACEMENTS\\Github-trials\\HospitalMgmt\\client\\src\\actions\\patient.js"],"names":["axios","setAlert","GET_PATIENTS","GET_ALL_PATIENTS","GET_PATIENT","PATIENT_ERROR","DELETE_PATIENT","ADD_PATIENT","EDIT_PATIENT","getMePatients","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","getPatients","deletePatient","id","delete","addPatient","formData","history","config","headers","post","push","errors","forEach","error","editPatient","put","getPatient"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { setAlert } from './alert';\r\nimport {\r\n    GET_PATIENTS,\r\n    GET_ALL_PATIENTS,\r\n    GET_PATIENT,\r\n    PATIENT_ERROR,\r\n    DELETE_PATIENT,\r\n    ADD_PATIENT,\r\n    EDIT_PATIENT\r\n } from './types';\r\n\r\n //Get Me Patients\r\n export const getMePatients = () => async dispatch => {\r\n    try {\r\n        const res = await axios.get('/api/patients/me');\r\n\r\n        dispatch({\r\n            type: GET_PATIENTS,\r\n            payload: res.data\r\n        });\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PATIENT_ERROR,\r\n            payload: { msg: err.response.statusText, status: err.response.status }\r\n          });\r\n    }\r\n }\r\n\r\n //Get All Patients\r\n export const getPatients = () => async dispatch => {\r\n    try {\r\n        const res = await axios.get('/api/patients');\r\n\r\n        dispatch({\r\n            type: GET_ALL_PATIENTS,\r\n            payload: res.data\r\n        });\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: PATIENT_ERROR,\r\n            payload: { msg: err.response.statusText, status: err.response.status }\r\n          });\r\n    }\r\n }\r\n\r\n // Delete patient\r\nexport const deletePatient = id => async dispatch => {\r\n    try {\r\n      await axios.delete(`/api/patients/${id}`);\r\n\r\n      dispatch({\r\n        type: DELETE_PATIENT,\r\n        payload: id\r\n      });\r\n\r\n      dispatch(setAlert('Patient Removed', 'success'));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: PATIENT_ERROR,\r\n        payload: { msg: err.response.statusText, status: err.response.status }\r\n      });\r\n    }\r\n  };\r\n\r\n  // Add patient\r\nexport const addPatient = (formData, history) => async dispatch => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post('/api/patients', formData, config);\r\n\r\n      dispatch({\r\n        type: ADD_PATIENT,\r\n        payload: res.data\r\n      });\r\n\r\n      dispatch(setAlert('Patient Created', 'success'));\r\n      history.push('/home');\r\n\r\n    } catch (err) {\r\n        const errors = err.response.data.errors;\r\n        \r\n        if (errors) {\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n        }\r\n        dispatch({\r\n            type: PATIENT_ERROR,\r\n            payload: { msg: err.response.statusText, status: err.response.status }\r\n        });\r\n    }\r\n  };\r\n\r\n    // Edit patient\r\nexport const editPatient = (id, formData, history) => async dispatch => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n\r\n    try {\r\n      const res = await axios.put(`/api/patients/${id}`, formData, config);\r\n\r\n      dispatch({\r\n        type: EDIT_PATIENT,\r\n        payload: res.data\r\n      });\r\n\r\n      dispatch(setAlert('Patient Updated', 'success'));\r\n      history.push('/home');\r\n\r\n    } catch (err) {\r\n        const errors = err.response.data.errors;\r\n\r\n        if (errors) {\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n        }\r\n        dispatch({\r\n            type: PATIENT_ERROR,\r\n            payload: { msg: err.response.statusText, status: err.response.status }\r\n        });\r\n    }\r\n  };\r\n\r\n  // Get patient\r\nexport const getPatient = id => async dispatch => {\r\n    try {\r\n      const res = await axios.get(`/api/patients/${id}`);\r\n\r\n      dispatch({\r\n        type: GET_PATIENT,\r\n        payload: res.data\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: PATIENT_ERROR,\r\n        payload: { msg: err.response.statusText, status: err.response.status }\r\n      });\r\n    }\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}