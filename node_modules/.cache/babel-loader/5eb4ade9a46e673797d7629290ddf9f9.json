{"ast":null,"code":"var _jsxFileName = \"F:\\\\GUVI-PLACEMENTS\\\\Github-trials\\\\HospitalMgmt\\\\client\\\\src\\\\components\\\\upload\\\\UploadDoc.js\";\nimport React, { Component } from 'react';\nimport Buttons from './Buttons';\nimport Notifications, { notify } from 'react-notify-toast';\nimport './UploadDoc.css';\nimport axios from 'axios';\nconst toastColor = {\n  background: 'red',\n  text: '#fff'\n};\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      uploading: false,\n      images: []\n    };\n    this.toast = notify.createShowQueue();\n\n    this.onChange = e => {\n      const errs = [];\n      const files = Array.from(e.target.files);\n\n      if (files.length > 3) {\n        const msg = 'Only 3 images can be uploaded at a time';\n        return this.toast(msg, 'custom', 2000, toastColor);\n      }\n\n      const formData = new FormData();\n      const types = ['image/png', 'image/jpeg', 'image/gif'];\n      files.forEach((file, i) => {\n        if (types.every(type => file.type !== type)) {\n          errs.push(\"'\".concat(file.type, \"' is not a supported format\"));\n        }\n\n        if (file.size > 150000) {\n          errs.push(\"'\".concat(file.name, \"' is too large, please pick a smaller file\"));\n        }\n\n        formData.append(i, file);\n      });\n\n      if (errs.length) {\n        return errs.forEach(err => this.toast(err, 'custom', 2000, toastColor));\n      }\n\n      this.setState({\n        uploading: true\n      });\n      axios.post('/image-upload', formData).then(res => {\n        if (!res.ok) {\n          throw res;\n        }\n\n        console.log(\"Inside then\", res);\n        return res.json();\n      }).then(images => {\n        console.log(\"Inside then2\", images);\n        this.setState({\n          uploading: false,\n          images\n        });\n      }).catch(err => {\n        if (err.statusText && err.statusText === \"OK\") {\n          this.setState({\n            uploading: false,\n            images: [...this.state.images, err.data[0].url]\n          });\n          console.log(\"Inside catch\", err.data[0].url);\n          console.log(err);\n        }\n      });\n    };\n\n    this.filter = id => {\n      return this.state.images.filter(image => image.public_id !== id);\n    };\n\n    this.onError = id => {\n      this.setState({\n        images: this.filter(id)\n      });\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          uploading = _this$state.uploading,\n          images = _this$state.images;\n\n    const content = () => {\n      switch (true) {\n        case uploading:\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91\n            },\n            __self: this\n          }, \"Loading...\");\n\n        case images.length > 0:\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93\n            },\n            __self: this\n          }, \"Aadhar/Passport Uploaded\");\n\n        default:\n          return React.createElement(Buttons, {\n            onChange: this.onChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 95\n            },\n            __self: this\n          });\n      }\n    };\n\n    return React.createElement(React.Fragment, null, React.createElement(Notifications, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, content()));\n  }\n\n}","map":{"version":3,"sources":["F:\\GUVI-PLACEMENTS\\Github-trials\\HospitalMgmt\\client\\src\\components\\upload\\UploadDoc.js"],"names":["React","Component","Buttons","Notifications","notify","axios","toastColor","background","text","App","state","uploading","images","toast","createShowQueue","onChange","e","errs","files","Array","from","target","length","msg","formData","FormData","types","forEach","file","i","every","type","push","size","name","append","err","setState","post","then","res","ok","console","log","json","catch","statusText","data","url","filter","id","image","public_id","onError","render","content"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Buttons from './Buttons'\r\nimport Notifications, { notify } from 'react-notify-toast'\r\nimport './UploadDoc.css'\r\nimport axios from 'axios';\r\n\r\nconst toastColor = {\r\n  background: 'red',\r\n  text: '#fff'\r\n}\r\n\r\nexport default class App extends Component {\r\n\r\n  state = {\r\n    uploading: false,\r\n    images: []\r\n  }\r\n\r\n  toast = notify.createShowQueue()\r\n\r\n  onChange = e => {\r\n    const errs = []\r\n    const files = Array.from(e.target.files)\r\n    if (files.length > 3) {\r\n      const msg = 'Only 3 images can be uploaded at a time'\r\n      return this.toast(msg, 'custom', 2000, toastColor)\r\n    }\r\n\r\n    const formData = new FormData()\r\n    const types = ['image/png', 'image/jpeg', 'image/gif']\r\n\r\n    files.forEach((file, i) => {\r\n\r\n      if (types.every(type => file.type !== type)) {\r\n        errs.push(`'${file.type}' is not a supported format`)\r\n      }\r\n\r\n      if (file.size > 150000) {\r\n        errs.push(`'${file.name}' is too large, please pick a smaller file`)\r\n      }\r\n\r\n      formData.append(i, file)\r\n    })\r\n\r\n    if (errs.length) {\r\n      return errs.forEach(err => this.toast(err, 'custom', 2000, toastColor))\r\n    }\r\n\r\n    this.setState({ uploading: true })\r\n    axios.post('/image-upload', formData)\r\n    .then(res => {\r\n      if (!res.ok) {\r\n        throw res\r\n      }\r\n      console.log(\"Inside then\", res)\r\n\r\n      return res.json()\r\n    })\r\n    .then(images => {\r\n      console.log(\"Inside then2\", images)\r\n\r\n      this.setState({\r\n        uploading: false,\r\n        images\r\n      })\r\n    })\r\n    .catch(err => {\r\n        if(err.statusText && err.statusText === \"OK\"){\r\n            this.setState({ uploading: false, images: [...this.state.images, err.data[0].url] })\r\n            console.log(\"Inside catch\", err.data[0].url)\r\n            console.log(err);\r\n        }\r\n    })\r\n  }\r\n\r\n  filter = id => {\r\n    return this.state.images.filter(image => image.public_id !== id)\r\n  }\r\n\r\n\r\n  onError = id => {\r\n    this.setState({ images: this.filter(id) })\r\n  }\r\n\r\n  render() {\r\n    const { uploading, images } = this.state\r\n\r\n    const content = () => {\r\n      switch(true) {\r\n        case uploading:\r\n          return <div>Loading...</div>\r\n        case images.length > 0:\r\n          return <div>Aadhar/Passport Uploaded</div>\r\n        default:\r\n          return <Buttons onChange={this.onChange} />\r\n      }\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Notifications />\r\n        <div className='buttons'>\r\n          {content()}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}