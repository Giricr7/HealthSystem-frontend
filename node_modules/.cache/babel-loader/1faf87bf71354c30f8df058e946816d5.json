{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, FORGOT_SUCCESS, FORGOT_FAIL, GET_ALL_USERS, GET_USER, EDIT_USER, USER_ERROR, LOGOUT } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password,\n  avatar\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password,\n    avatar\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    if (err) {\n      dispatch(setAlert(error.msg, 'danger'));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    if (err) {\n      dispatch(setAlert(err, 'danger'));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Forgot Password\n\nexport const forgot = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  console.log(body);\n\n  try {\n    const res = await axios.put('/api/users', body, config);\n    dispatch({\n      type: FORGOT_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: FORGOT_FAIL\n    });\n  }\n}; //Get All Users\n\nexport const getUsers = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/users');\n    dispatch({\n      type: GET_ALL_USERS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: USER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get called user\n\nexport const getUser = id => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/users/\".concat(id));\n    dispatch({\n      type: GET_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: USER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Edit user\n\nexport const editUser = (id, formData, history) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.put(\"/api/users/\".concat(id), formData, config);\n    dispatch({\n      type: EDIT_USER,\n      payload: res.data\n    });\n    dispatch(setAlert('User Updated', 'success'));\n    history.push('/home');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: USER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Logout / Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["F:\\GUVI-PLACEMENTS\\FINAL PROJECTS-FRONT\\HospitalSystem\\HealthSystem-frontend\\src\\actions\\auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","FORGOT_SUCCESS","FORGOT_FAIL","GET_ALL_USERS","GET_USER","EDIT_USER","USER_ERROR","LOGOUT","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","avatar","config","headers","body","JSON","stringify","post","error","msg","login","forgot","console","log","put","errors","response","forEach","getUsers","statusText","status","getUser","id","editUser","formData","history","push","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { setAlert } from './alert';\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  FORGOT_SUCCESS,\r\n  FORGOT_FAIL,\r\n  GET_ALL_USERS,\r\n  GET_USER,\r\n  EDIT_USER,\r\n  USER_ERROR,\r\n  LOGOUT\r\n} from './types';\r\nimport setAuthToken from '../utils/setAuthToken';\r\n\r\n// Load User\r\nexport const loadUser = () => async dispatch => {\r\n    if (localStorage.token) {\r\n      setAuthToken(localStorage.token);\r\n    }\r\n\r\n    try {\r\n      const res = await axios.get('/api/auth');\r\n\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: AUTH_ERROR\r\n      });\r\n    }\r\n  };\r\n\r\n// Register User\r\nexport const register = ({ name, email, password, avatar }) => async dispatch => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n\r\n    const body = JSON.stringify({ name, email, password, avatar });\r\n\r\n    try {\r\n      const res = await axios.post('/api/users', body, config);\r\n\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data\r\n      });\r\n      dispatch(loadUser());\r\n\r\n    } catch (err) {\r\n      \r\n\r\n      if (err) {\r\n        dispatch(setAlert(error.msg, 'danger'));\r\n      }\r\n\r\n      dispatch({\r\n        type: REGISTER_FAIL\r\n      });\r\n    }\r\n  };\r\n\r\n// Login User\r\nexport const login = (email, password) => async dispatch => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n\r\n    const body = JSON.stringify({ email, password });\r\n\r\n    try {\r\n      const res = await axios.post('/api/auth', body, config);\r\n\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: res.data\r\n      });\r\n\r\n      dispatch(loadUser());\r\n    } catch (err) {\r\n\r\n      if (err) {\r\n         dispatch(setAlert(err, 'danger'));\r\n      }\r\n\r\n      dispatch({\r\n        type: LOGIN_FAIL\r\n      });\r\n    }\r\n  };\r\n\r\n// Forgot Password\r\nexport const forgot = (email, password) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  const body = JSON.stringify({ email, password });\r\n  console.log(body);\r\n\r\n  try {\r\n    const res = await axios.put('/api/users', body, config);\r\n\r\n    dispatch({\r\n      type: FORGOT_SUCCESS,\r\n      payload: res.data\r\n    });\r\n\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n\r\n    dispatch({\r\n      type: FORGOT_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n //Get All Users\r\n export const getUsers = () => async dispatch => {\r\n  try {\r\n      const res = await axios.get('/api/users');\r\n\r\n      dispatch({\r\n          type: GET_ALL_USERS,\r\n          payload: res.data\r\n      });\r\n\r\n  } catch (err) {\r\n      dispatch({\r\n          type: USER_ERROR,\r\n          payload: { msg: err.response.statusText, status: err.response.status }\r\n        });\r\n  }\r\n}\r\n\r\n  // Get called user\r\n  export const getUser = id => async dispatch => {\r\n    try {\r\n      const res = await axios.get(`/api/users/${id}`);\r\n\r\n      dispatch({\r\n        type: GET_USER,\r\n        payload: res.data\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: USER_ERROR,\r\n        payload: { msg: err.response.statusText, status: err.response.status }\r\n      });\r\n    }\r\n  };\r\n\r\n// Edit user\r\nexport const editUser = (id, formData, history) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  };\r\n\r\n  try {\r\n    const res = await axios.put(`/api/users/${id}`, formData, config);\r\n\r\n    dispatch({\r\n      type: EDIT_USER,\r\n      payload: res.data\r\n    });\r\n\r\n    dispatch(setAlert('User Updated', 'success'));\r\n    history.push('/home');\r\n\r\n  } catch (err) {\r\n      const errors = err.response.data.errors;\r\n\r\n      if (errors) {\r\n          errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n      }\r\n      dispatch({\r\n          type: USER_ERROR,\r\n          payload: { msg: err.response.statusText, status: err.response.status }\r\n      });\r\n  }\r\n};\r\n\r\n  // Logout / Clear Profile\r\nexport const logout = () => dispatch => {\r\n    dispatch({ type: LOGOUT });\r\n  };"]},"metadata":{},"sourceType":"module"}