{"ast":null,"code":"var _jsxFileName = \"F:\\\\GUVI-PLACEMENTS\\\\FINAL PROJECTS-FRONT\\\\HospitalSystem\\\\HealthSystem-frontend\\\\src\\\\components\\\\hospitals\\\\Hospital.js\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport { getHospital } from \"../../actions/hospital\";\n\nconst Hospital = ({\n  getHospital,\n  hospital: {\n    hospital,\n    loading\n  },\n  match\n}) => {\n  useEffect(() => {\n    getHospital(match.params.id);\n  }, [getHospital]);\n  return loading || hospital === null ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }) : React.createElement(React.Fragment, null, React.createElement(Link, {\n    to: \"/hospitals\",\n    className: \"btn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"Back To Hospitals\"), React.createElement(\"div\", {\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"Name\"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"name\",\n    name: \"name\",\n    value: hospital.name,\n    readOnly: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"area\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Area\"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"area\",\n    name: \"area\",\n    value: hospital.area,\n    readOnly: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"city\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"City\"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"city\",\n    name: \"city\",\n    value: hospital.city,\n    readOnly: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"country\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Country\"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"country\",\n    name: \"country\",\n    value: hospital.country,\n    readOnly: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"mobile\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Mobile\"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"mobile\",\n    name: \"mobile\",\n    value: hospital.mobile,\n    readOnly: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"email\"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"email\",\n    name: \"email\",\n    value: hospital.email,\n    readOnly: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })));\n};\n\nHospital.propTypes = {\n  getHospital: PropTypes.func.isRequired,\n  hospital: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  hospital: state.hospital\n});\n\nexport default connect(mapStateToProps, {\n  getHospital\n})(Hospital);","map":{"version":3,"sources":["F:\\GUVI-PLACEMENTS\\FINAL PROJECTS-FRONT\\HospitalSystem\\HealthSystem-frontend\\src\\components\\hospitals\\Hospital.js"],"names":["React","useEffect","PropTypes","Link","connect","Spinner","getHospital","Hospital","hospital","loading","match","params","id","name","area","city","country","mobile","email","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAED,EAAAA,WAAF;AAAeE,EAAAA,QAAQ,EAAE;AAAEA,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAzB;AAAgDC,EAAAA;AAAhD,CAAD,KAA6D;AAE1ET,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,WAAW,CAACI,KAAK,CAACC,MAAN,CAAaC,EAAd,CAAX;AACH,GAFQ,EAEN,CAACN,WAAD,CAFM,CAAT;AAIA,SAAOG,OAAO,IAAID,QAAQ,KAAK,IAAxB,GACH,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,GAIC,0CACI,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,YAAT;AAAsB,IAAA,SAAS,EAAC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,EAII;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,EAAE,EAAC,MAFP;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,KAAK,EAAEA,QAAQ,CAACK,IAJpB;AAKI,IAAA,QAAQ,MALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EASI;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ,EAUI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,EAAE,EAAC,MAFP;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,KAAK,EAAEL,QAAQ,CAACM,IAJpB;AAKI,IAAA,QAAQ,MALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,EAiBI;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBJ,EAkBI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,EAAE,EAAC,MAFP;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,KAAK,EAAEN,QAAQ,CAACO,IAJpB;AAKI,IAAA,QAAQ,MALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBJ,EAyBI;AAAO,IAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAzBJ,EA0BI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,EAAE,EAAC,SAFP;AAGI,IAAA,IAAI,EAAC,SAHT;AAII,IAAA,KAAK,EAAEP,QAAQ,CAACQ,OAJpB;AAKI,IAAA,QAAQ,MALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BJ,EAiCI;AAAO,IAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjCJ,EAkCI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,EAAE,EAAC,QAFP;AAGI,IAAA,IAAI,EAAC,QAHT;AAII,IAAA,KAAK,EAAER,QAAQ,CAACS,MAJpB;AAKI,IAAA,QAAQ,MALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlCJ,EAyCI;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAzCJ,EA0CI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,EAAE,EAAC,OAFP;AAGI,IAAA,IAAI,EAAC,OAHT;AAII,IAAA,KAAK,EAAET,QAAQ,CAACU,KAJpB;AAKI,IAAA,QAAQ,MALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1CJ,CAJJ,CAJR;AA4DH,CAlED;;AAoEAX,QAAQ,CAACY,SAAT,GAAqB;AACjBb,EAAAA,WAAW,EAAEJ,SAAS,CAACkB,IAAV,CAAeC,UADX;AAEjBb,EAAAA,QAAQ,EAAEN,SAAS,CAACoB,MAAV,CAAiBD;AAFV,CAArB;;AAKA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAC9BhB,EAAAA,QAAQ,EAAEgB,KAAK,CAAChB;AADc,CAAL,CAA7B;;AAIA,eAAeJ,OAAO,CAACmB,eAAD,EAAkB;AAAEjB,EAAAA;AAAF,CAAlB,CAAP,CAA0CC,QAA1C,CAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../layout/Spinner';\r\nimport { getHospital } from \"../../actions/hospital\";\r\n\r\nconst Hospital = ({ getHospital, hospital: { hospital, loading }, match }) => {\r\n\r\n    useEffect(() => {\r\n        getHospital(match.params.id);\r\n    }, [getHospital]);\r\n\r\n    return loading || hospital === null ? (\r\n        <Spinner />\r\n    ) : (\r\n\r\n            <>\r\n                <Link to='/hospitals' className='btn'>\r\n                    Back To Hospitals\r\n                </Link>\r\n                <div className='form'>\r\n                    <label htmlFor='name'>Name</label>\r\n                    <input\r\n                        type='text'\r\n                        id='name'\r\n                        name='name'\r\n                        value={hospital.name}\r\n                        readOnly\r\n                    />\r\n                    <label htmlFor='area'>Area</label>\r\n                    <input\r\n                        type='text'\r\n                        id='area'\r\n                        name='area'\r\n                        value={hospital.area}\r\n                        readOnly\r\n                    />\r\n                    <label htmlFor='city'>City</label>\r\n                    <input\r\n                        type='text'\r\n                        id='city'\r\n                        name='city'\r\n                        value={hospital.city}\r\n                        readOnly\r\n                    />\r\n                    <label htmlFor='country'>Country</label>\r\n                    <input\r\n                        type='text'\r\n                        id='country'\r\n                        name='country'\r\n                        value={hospital.country}\r\n                        readOnly\r\n                    />\r\n                    <label htmlFor='mobile'>Mobile</label>\r\n                    <input\r\n                        type='text'\r\n                        id='mobile'\r\n                        name='mobile'\r\n                        value={hospital.mobile}\r\n                        readOnly\r\n                    />\r\n                    <label htmlFor='email'>email</label>\r\n                    <input\r\n                        type='text'\r\n                        id='email'\r\n                        name='email'\r\n                        value={hospital.email}\r\n                        readOnly\r\n                    />\r\n                </div>\r\n            </>\r\n        );\r\n}\r\n\r\nHospital.propTypes = {\r\n    getHospital: PropTypes.func.isRequired,\r\n    hospital: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    hospital: state.hospital\r\n});\r\n\r\nexport default connect(mapStateToProps, { getHospital })(Hospital);\r\n\r\n"]},"metadata":{},"sourceType":"module"}