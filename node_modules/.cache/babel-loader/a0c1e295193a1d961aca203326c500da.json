{"ast":null,"code":"var _jsxFileName = \"F:\\\\GUVI-PLACEMENTS\\\\Github-trials\\\\HospitalMgmt\\\\client\\\\src\\\\components\\\\hospitals\\\\EditHospitalForm.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { editHospital, getHospital } from \"../../actions/hospital\";\nimport isEmpty from '../patients/is-empty';\n\nclass EditHospitalForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      area: \"\",\n      city: \"\",\n      country: \"\",\n      mobile: \"\",\n      email: \"\"\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.getHospital(this.props.match.params.id);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.hospital.hospital) {\n      const hospital = nextProps.hospital.hospital; // If hospital field doesnt exist, make empty string\n\n      hospital.name = !isEmpty(hospital.name) ? hospital.name : '';\n      hospital.area = !isEmpty(hospital.area) ? hospital.area : '';\n      hospital.city = !isEmpty(hospital.city) ? hospital.city : '';\n      hospital.country = !isEmpty(hospital.country) ? hospital.country : '';\n      hospital.mobile = !isEmpty(hospital.mobile) ? hospital.mobile : '';\n      hospital.email = !isEmpty(hospital.email) ? hospital.email : ''; // Set component fields state\n\n      this.setState({\n        name: hospital.name,\n        area: hospital.area,\n        city: hospital.city,\n        country: hospital.country,\n        mobile: hospital.mobile,\n        email: hospital.email\n      });\n    }\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const hospitalData = {\n      name: this.state.name,\n      area: this.state.area,\n      city: this.state.city,\n      country: this.state.country,\n      mobile: this.state.mobile,\n      email: this.state.email\n    };\n    this.props.editHospital(this.props.match.params.id, hospitalData, this.props.history);\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n      className: \"large text-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Edit a Hospital\"), React.createElement(\"p\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), \" Let's edit some information about the hospital\"), React.createElement(\"small\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"* = required field\"), React.createElement(\"form\", {\n      className: \"form\",\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"* Name\",\n      name: \"name\",\n      value: this.state.name,\n      onChange: this.onChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"number\",\n      placeholder: \"* Mobile\",\n      name: \"mobile\",\n      value: this.state.mobile,\n      onChange: this.onChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Area\",\n      name: \"area\",\n      value: this.state.area,\n      onChange: this.onChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"* City\",\n      name: \"city\",\n      value: this.state.city,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Country\",\n      name: \"country\",\n      value: this.state.country,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"email\",\n      placeholder: \"Email\",\n      name: \"email\",\n      value: this.state.email,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      className: \"btn btn-primary my-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(Link, {\n      className: \"btn btn-light my-1\",\n      to: \"/hospitals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Go Back\")));\n  }\n\n}\n\nEditHospitalForm.propTypes = {\n  editHospital: PropTypes.func.isRequired,\n  getHospital: PropTypes.func.isRequired,\n  hospital: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  hospital: state.hospital\n});\n\nexport default connect(mapStateToProps, {\n  editHospital,\n  getHospital\n})(withRouter(EditHospitalForm));","map":{"version":3,"sources":["F:\\GUVI-PLACEMENTS\\Github-trials\\HospitalMgmt\\client\\src\\components\\hospitals\\EditHospitalForm.js"],"names":["React","Component","Link","withRouter","PropTypes","connect","editHospital","getHospital","isEmpty","EditHospitalForm","constructor","props","state","name","area","city","country","mobile","email","onChange","bind","onSubmit","componentDidMount","match","params","id","UNSAFE_componentWillReceiveProps","nextProps","hospital","setState","e","preventDefault","hospitalData","history","target","value","render","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { editHospital, getHospital } from \"../../actions/hospital\";\r\nimport isEmpty from '../patients/is-empty';\r\n\r\nclass EditHospitalForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            area: \"\",\r\n            city: \"\",\r\n            country: \"\",\r\n            mobile: \"\",\r\n            email: \"\"\r\n        }\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getHospital(this.props.match.params.id);\r\n    }\r\n\r\n    UNSAFE_componentWillReceiveProps(nextProps) {\r\n        if(nextProps.hospital.hospital) {\r\n            const hospital = nextProps.hospital.hospital;\r\n\r\n          // If hospital field doesnt exist, make empty string\r\n            hospital.name = !isEmpty(hospital.name) ? hospital.name : '';\r\n            hospital.area = !isEmpty(hospital.area) ? hospital.area : '';\r\n            hospital.city = !isEmpty(hospital.city) ? hospital.city : '';\r\n            hospital.country = !isEmpty(hospital.country) ? hospital.country : '';\r\n            hospital.mobile = !isEmpty(hospital.mobile) ? hospital.mobile : '';\r\n            hospital.email = !isEmpty(hospital.email) ? hospital.email : '';\r\n            // Set component fields state\r\n            this.setState({\r\n                name: hospital.name,\r\n                area: hospital.area,\r\n                city: hospital.city,\r\n                country: hospital.country,\r\n                mobile: hospital.mobile,\r\n                email: hospital.email\r\n            });\r\n        }\r\n      }\r\n\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const hospitalData = {\r\n          name: this.state.name,\r\n          area: this.state.area,\r\n          city: this.state.city,\r\n          country: this.state.country,\r\n          mobile: this.state.mobile,\r\n          email: this.state.email\r\n        };\r\n\r\n        this.props.editHospital(this.props.match.params.id, hospitalData, this.props.history);\r\n\r\n      }\r\n\r\n      onChange(e) {\r\n        this.setState({[e.target.name]: e.target.value});\r\n      }\r\n\r\n    render() {\r\n    return (\r\n        <>\r\n            <h1 className='large text-primary'>Edit a Hospital</h1>\r\n            <p className='lead'>\r\n                <i className='fas fa-user' /> Let's edit some information about the hospital\r\n            </p>\r\n            <small>* = required field</small>\r\n            <form className='form' onSubmit={this.onSubmit}>\r\n                <div className='form-group'>\r\n                    <input\r\n                        type='text'\r\n                        placeholder='* Name'\r\n                        name='name'\r\n                        value={this.state.name}\r\n                        onChange={this.onChange}\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className='form-group'>\r\n                    <input\r\n                        type='number'\r\n                        placeholder='* Mobile'\r\n                        name='mobile'\r\n                        value={this.state.mobile}\r\n                        onChange={this.onChange}\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className='form-group'>\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Area'\r\n                        name='area'\r\n                        value={this.state.area}\r\n                        onChange={this.onChange}\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className='form-group'>\r\n                    <input\r\n                        type='text'\r\n                        placeholder='* City'\r\n                        name='city'\r\n                        value={this.state.city}\r\n                        onChange={this.onChange}\r\n                    />\r\n                </div>\r\n                <div className='form-group'>\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Country'\r\n                        name='country'\r\n                        value={this.state.country}\r\n                        onChange={this.onChange}\r\n                    />\r\n                </div>\r\n                <div className='form-group'>\r\n                    <input\r\n                        type='email'\r\n                        placeholder='Email'\r\n                        name='email'\r\n                        value={this.state.email}\r\n                        onChange={this.onChange}\r\n                    />\r\n                </div>\r\n                <input type='submit' className='btn btn-primary my-1' />\r\n                <Link className='btn btn-light my-1' to='/hospitals'>\r\n                    Go Back\r\n                </Link>\r\n            </form>\r\n\r\n        </>\r\n    )\r\n }\r\n}\r\n\r\nEditHospitalForm.propTypes = {\r\n    editHospital: PropTypes.func.isRequired,\r\n    getHospital: PropTypes.func.isRequired,\r\n    hospital: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    hospital: state.hospital\r\n});\r\n\r\nexport default connect(mapStateToProps, { editHospital, getHospital })(withRouter(EditHospitalForm));\r\n"]},"metadata":{},"sourceType":"module"}